===================================
How to Use ``0-add_integer`` Module
===================================

This module defines a function that adds two integer:``add_integer(a, b=98)``.

Usage: ``add_integer(a, b)`` | ``add_integer(a)``
======

Atleast one argument must be passed.
If only one argument is passed, the value `98` is used as the second.
Arguments must be float or int.
Return: the sum.

Examples with successfull tests
===============================

::  First, import the module.
>>> add_integer = __import__('0-add_integer').add_integer

>>> add_integer(1, 2)
3

>>> add_integer(1, -2)
-1

>>> add_integer(-1, 2)
1

::  floats are casted to ints before addition is performed.
>>> add_integer(2.0, 3.0)
5

>>> add_integer(2.9, 0.2)
2

>>> add_integer(-2.9, -0.2)
-2

>>> add_integer(2.3, -3)
-1

::  When only one (1) argument is passed.
>>> add_integer(2)
100

>>> add_integer(0)
98

>>> add_integer(-10)
88

Examples with Exceptions
========================

::  When unaccepted types- strings, lists, tuples,
    dictionaries, etc, that non-digit types are
    passed for either of the arguments.

>>> add_integer()
Traceback (most recent call last):
TypeError: add_integer() missing 1 required positional argument: 'a'

>>> add_integer("hello", 0)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(0, "dlorw")
Traceback (most recent call last):
TypeError: b must be an integer

>>> add_integer([], 9)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer((0,))
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(set(), 9)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(None)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(6.3, None)
Traceback (most recent call last):
TypeError: b must be an integer

>>> add_integer("hello", "world")
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(1, float('nan'))
Traceback (most recent call last):
ValueError: cannot convert float NaN to integer

>>> add_integer(float('nan'))
Traceback (most recent call last):
ValueError: cannot convert float NaN to integer

>>> add_integer(float('inf'))
Traceback (most recent call last):
OverflowError: cannot convert float infinity to integer
     
>>> add_integer(10, float('inf'))
Traceback (most recent call last):
OverflowError: cannot convert float infinity to integer
